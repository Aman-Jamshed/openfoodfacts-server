name: Container Image Deployment CI

on:
  push:
    branches:
      - main
      - deploy-*
    tags: 
      - v*.*.*

jobs:
  deploy:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        PRODUCT_OPENER_FLAVOR: ['openfoodfacts', 'openbeautyfacts']
    environment: ${{ startsWith(github.ref, 'refs/tags/v') && 'off-org' || 'off-net' }}
    concurrency: ${{ startsWith(github.ref, 'refs/tags/v') && 'off-org' || 'off-net' }}
    steps:

    - name: Wait for frontend container build workflow
      uses: tomchv/wait-my-workflow@v1.1.0
      id: wait-build
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        checkName: build (frontend)
        ref: ${{ github.event.pull_request.head.sha || github.sha }}
        intervalSeconds: 10
        timeoutSeconds: 600 # 10m

    - name: Wait for backend container build workflow
      uses: tomchv/wait-my-workflow@v1.1.0
      id: wait-build2
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        checkName: build (backend)
        ref: ${{ github.event.pull_request.head.sha || github.sha }}
        intervalSeconds: 10
        timeoutSeconds: 600 # 10m

    - name: Do something if build isn't launch
      if: steps.wait-build.outputs.conclusion == 'does not exist' || steps.wait-build2.outputs.conclusion == 'does not exist'
      run: echo job does not exist && true

    - name: Do something if build fail
      if: steps.wait-build.outputs.conclusion == 'failure' || steps.wait-build2.outputs.conclusion == 'failure' 
      run: echo fail && false # fail if build fail

    - name: Do something if build timeout
      if: steps.wait-build.outputs.conclusion == 'timed_out' || steps.wait-build2.outputs.conclusion == 'timed_out'
      run: echo Timeout && false # fail if build time out

    - name: Checkout git repository
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        proxy_host: ${{ secrets.PROXY_HOST }}
        proxy_username: ${{ secrets.USERNAME }}
        proxy_key: ${{ secrets.SSH_PRIVATE_KEY }}
        script_stop: false
        script: |
          # Clone Git repository if not already there
          [ ! -d '${{ github.event.repository.name }}' ] && git clone --depth 1 https://github.com/${{ github.repository }}/ --no-single-branch 2>&1

          # Go to repository directory
          cd ${{ github.event.repository.name }}/

          # Fetch newest commits (in case it wasn't freshly cloned)
          git fetch --depth 1

          # Checkout current commit SHA
          git checkout -qf ${{ github.sha }}

    - name: Get Product Opener flavor variables
      run: |
        DEPLOY_ENV="${{ env.environment }}"
        echo PRODUCT_OPENER_SUFFIX=${DEPLOY_ENV##*:} >> $GITHUB_ENV
        echo ENV_FILE=.env.${{ matrix.PRODUCT_OPENER_FLAVOR }} >> $GITHUB_ENV
        echo PRODUCT_OPENER_FLAVOR_SHORT=`echo ${{ matrix.PRODUCT_OPENER_FLAVOR }} | sed 's/open/o/g' | sed 's/food/f/g' | sed 's/facts/f/g' | sed 's/beauty/b/g' | sed 's/products/p/g' | sed 's/pet/p/g'` >> $GITHUB_ENV

    - name: Set environment variables
      uses: appleboy/ssh-action@master
      env:
        ENV_FILE: ${{ env.ENV_FILE }}
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        proxy_host: ${{ secrets.PROXY_HOST }}
        proxy_username: ${{ secrets.USERNAME }}
        proxy_key: ${{ secrets.SSH_PRIVATE_KEY }}
        envs: ENV_FILE
        script_stop: false
        script: |
          # Go to repository directory
          cd ${{ github.event.repository.name }}/

          # Set Docker Compose variables
          echo "DOCKER_CLIENT_TIMEOUT=120" > ${ENV_FILE}
          echo "COMPOSE_HTTP_TIMEOUT=120" >> ${ENV_FILE}
          echo "COMPOSE_PROJECT_NAME=po" >> ${ENV_FILE}
          echo "COMPOSE_PATH_SEPARATOR=;" >> ${ENV_FILE}
          if [ "${{ env.PRODUCT_OPENER_FLAVOR_SHORT }}" == "off" ]
          then 
            echo "COMPOSE_FILE=docker-compose.yml;docker/prod.yml;docker/geolite2.yml" >> ${ENV_FILE}
          else
            echo "COMPOSE_FILE=docker-compose.yml;docker/prod.yml;" >> ${ENV_FILE}
          fi

          # Set App variables
          echo "TAG=sha-${{ github.sha }}" >> ${ENV_FILE}
          echo "PRODUCERS_PLATFORM=0" >> ${ENV_FILE}
          echo "PRODUCT_OPENER_PORT=80" >> ${ENV_FILE}
          echo "PRODUCT_OPENER_DOMAIN=${{ matrix.PRODUCT_OPENER_FLAVOR }}.${{ env.PRODUCT_OPENER_SUFFIX }}" >> ${ENV_FILE}
          echo "PRODUCT_OPENER_FLAVOR=${{ secrets.PRODUCT_OPENER_FLAVOR }}" >> ${ENV_FILE}
          echo "MONGODB_HOST=${{ secrets.MONGODB_HOST }}" >> ${ENV_FILE}
          echo "POSTGRES_USER=${{ secrets.POSTGRES_USER }}" >> ${ENV_FILE}
          echo "POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}" >> ${ENV_FILE}
          echo "ROBOTOFF_URL=${{ secrets.ROBOTOFF_URL }}" >> ${ENV_FILE}
          echo "GOOGLE_CLOUD_VISION_API_KEY=${{ secrets.GOOGLE_CLOUD_VISION_API_KEY }}" >> ${ENV_FILE}
          echo "CROWDIN_PROJECT_IDENTIFIER=${{ secrets.CROWDIN_PROJECT_IDENTIFIER }}" >> ${ENV_FILE}
          echo "CROWDIN_PROJECT_KEY=${{ secrets.CROWDIN_PROJECT_KEY }}" >> ${ENV_FILE}
          echo "GEOLITE2_PATH=${{ secrets.GEOLITE2_PATH }}" >> ${ENV_FILE}
          echo "GEOLITE2_LICENSE_KEY=${{ secrets.GEOLITE2_LICENSE_KEY }}" >> ${ENV_FILE}
          echo "GEOLITE2_ACCOUNT_ID=${{ secrets.GEOLITE2_ACCOUNT_ID }}" >> ${ENV_FILE}

          # Override domain name in nginx.conf
          sed -i.bak "s/productopener.localhost/${{ secrets.PRODUCT_OPENER_DOMAIN }}/g" ./conf/nginx.conf

    - name: Create Docker volumes
      uses: appleboy/ssh-action@master
      env:
        ENV_FILE: ${{ env.ENV_FILE }}
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        proxy_host: ${{ secrets.PROXY_HOST }}
        proxy_username: ${{ secrets.USERNAME }}
        proxy_key: ${{ secrets.SSH_PRIVATE_KEY }}
        envs: ENV_FILE
        script_stop: false
        script: |
          cd ${{ github.event.repository.name }}/
          make create_external_volumes

    - name: Start services
      uses: appleboy/ssh-action@master
      env:
        ENV_FILE: ${{ env.ENV_FILE }}
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        proxy_host: ${{ secrets.PROXY_HOST }}
        proxy_username: ${{ secrets.USERNAME }}
        proxy_key: ${{ secrets.SSH_PRIVATE_KEY }}
        envs: ENV_FILE
        script_stop: false
        script: |
          cd ${{ github.event.repository.name }}/
          make up 2>&1
          make setup_incron

    - name: Check services are up
      uses: appleboy/ssh-action@master
      env:
        ENV_FILE: ${{ env.ENV_FILE }}
      if: ${{ always() }}
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        proxy_host: ${{ secrets.PROXY_HOST }}
        proxy_username: ${{ secrets.USERNAME }}
        proxy_key: ${{ secrets.SSH_PRIVATE_KEY }}
        envs: ENV_FILE
        script_stop: false
        script: |
          cd ${{ github.event.repository.name }}/
          make livecheck

    - name: Cleanup obsolete Docker objects
      uses: appleboy/ssh-action@master
      env:
        ENV_FILE: ${{ env.ENV_FILE }}
      if: ${{ always() }}
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        proxy_host: ${{ secrets.PROXY_HOST }}
        proxy_username: ${{ secrets.USERNAME }}
        proxy_key: ${{ secrets.SSH_PRIVATE_KEY }}
        envs: ENV_FILE
        script_stop: false
        script: |
          cd ${{ github.event.repository.name }}/
          make prune
